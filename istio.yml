apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: users-gateway
  namespace: mimikube-dev
spec:
  selector:
    istio: ingressgateway #istio default controller
  servers:
    - port:
        # это порт, который прокинут на сервисе istio-ingressgateway (там их несколько штук)
        # и не все эти порты свободны, 80 - свободен и 443(https)
        # а 31400 - тоже свободен, но не факт, что и будет всегда такой порт
        number: 80
        name: http-service
        protocol: HTTP
      # хосты, по которым можно попасть в этот gateway снаружи (из браузера)
      hosts:
        - "test.info"
    - port:
        number: 31400
        name: http-metrics
        protocol: HTTP
      hosts:
        - "test.info"

---

apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: prometheus-gateway
  namespace: mimikube-dev
spec:
  selector:
    istio: ingressgateway #istio default controller
  servers:
    - port:
        # это порт, который прокинут на сервисе istio-ingressgateway (там их несколько штук)
        # и не все эти порты свободны, 80 - свободен и 443(https)
        # а 31400 - тоже свободен, но не факт, что и будет всегда такой порт
        number: 31400
        name: http-service
        protocol: HTTP
      # хосты, по которым можно попасть в этот gateway снаружи (из браузера)
      hosts:
        - "prometheus.prom"


---

apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: user-vs
  namespace: mimikube-dev
spec:
  # Это хосты, по которым можно будет достучаться до сервиса
  # Если не указать здесь хост, то этот виртуал сервис не будет принимать его
  hosts:
    - "test.info"
    - "prometheus.prom"
  # Указывается дырка, по которой можно будет залезть сюда
  # Если не указать здесь gateway, то его нельзя будет использовать в match
  gateways:
    - users-gateway
    - prometheus-gateway
  http:
    - match:
        - gateways:
            - prometheus-gateway
      route:
        - destination:
            host: agent-service
            port:
              number: 9090
    # так можно искать совпадения. Если зашли по http://test.info/ - отправляет на destination, описанный в route
    - match:
        #- uri:
        #    prefix: / # если поставить /users - то только если в пути будет этот префикс, то будет отправлять в user-service
        - gateways:
            - users-gateway
          port: 80
      route:
        - destination:
            # можно обратиться по имени сервиса
            host: user-service
            # Номер порта на сервисе
            port:
              number: 80
    - match:
        - gateways:
            - users-gateway
          port: 31400
      route:
        - destination:
            host: user-service
            port:
              number: 8081

---

##########################################tls ############################################
# Через этот gateway можно будет попадать на user-service но через https соединение (через порт 443)
# Для этого скначала надо создать секрет на основе сертификатов, которые мы создали
# kubectl create secret tls -n istio-system istio-root-cert \
# --key=certs/test.info.key --cert=certs/test.info.crt
# В итоге мы сможем попасть на user-service, если в браузере пройдем по ссылке: https://test.info/
# НЕ ЗАБЫТЬ ДОБАВИТЬ test.info в /etc/hosts
#

apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: https-gateway
  namespace: mimikube-dev
spec:
  selector:
    istio: ingressgateway # use istio default ingress gateway
  servers:
    - port:
        number: 443
        name: https
        protocol: HTTPS
      # В этом модуле мы задаем параметры tls доступа
      tls:
        mode: SIMPLE
        # Имя секрета с сертификатами. В нашем случае секрет лежит в неймспейсе istio-system
        credentialName: istio-root-cert
      # хост, по которому можно будет войти в эту дырку
      hosts:
        - "test.info"

---
# Тут ничего особенного, все чудеса в gateway
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: https-prometheus-vs
  namespace: mimikube-dev
spec:
  hosts:
    - "test.info"
  gateways:
    - https-gateway
  http:
    - match:
        - gateways:
            - https-gateway
      route:
        - destination:
            port:
              number: 80
            host: user-service


---
################################# mtls #########################################
#
#
#
#
#


apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: mtls-gateway
  namespace: mimikube-dev
spec:
  selector:
    istio: ingressgateway # use istio default ingress gateway
  servers:
    - port:
        # потому что порт 443 занят tls подключением
        # Не забыть открыть этот порт в istio-ingressgateway сервисе
        # А перед этим добавить в деплоймент istio-ingressgateway этот порт
        # (ну или другой, главное чтобы в service был)
        number: 8083
        name: https
        protocol: HTTPS
      tls:
        mode: MUTUAL   # mTLS - m = MUTUAL mode
        credentialName: mtls-certs # must be the same as secret
      hosts:
        - "prometheus.test.info"

---

# Тут ничего особенного, все чудеса в gateway
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: mtls-prometheus-vs
  namespace: mimikube-dev
spec:
  hosts:
    - "prometheus.test.info"
  gateways:
    - mtls-gateway
  http:
    - match:
        - gateways:
            - mtls-gateway
      route:
        - destination:
            port:
              number: 9090
            host: agent-service