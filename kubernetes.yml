apiVersion: v1
kind: Namespace
metadata:
  name: mimikube-dev

---

apiVersion: apps/v1
kind: Deployment
metadata:
  # название деплоймента
  name: coordinator-deployment
  namespace: mimikube-dev
  labels:
    app: coordinator-label
spec:
  # Количество реплик
  replicas: 1
  # Указывает, с какими подами будет работать деплоймент
  selector:
    #Поды, у которых есть такой label
    matchLabels:
      project: coordinator-pod
    #Описание подов этого деплоймента
  template:
    metadata:
      name: coordinator-pod
      #Очевидно, что должны быть такие же labels, какие мы указали в matchLabels в деплойменте
      labels:
        project: coordinator-pod
    spec:
      #Описываем, какие контейнеры будут в этом поде
      containers:
        - name: coordinator-container
          image: coordinator
          # образ никогда не будет скачиваться из-вне, только из имеющихся уже на устройстве локально
          imagePullPolicy: Never
          ports:
            - containerPort: 8080

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-deployment
  namespace: mimikube-dev
  labels:
    app: user-label
spec:
  selector:
    matchLabels:
      project: user-pod
  template:
    metadata:
      name: user-pod
      labels:
        project: user-pod
    spec:
      containers:
        - name: user-container
          image: user
          imagePullPolicy: Never
          ports:
            - containerPort: 8082

---

apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: mimikube-dev
  annotations:
    prometheus.io.path: /actuator/prometheus
    prometheus.io.port: '8081'
    prometheus.io.scrape: 'true'
spec:
  # На какие поды будет работать этот сервис
  selector:
    # все поды с таким лейблом
    project: user-pod
  ports:
    - name: user-port-metrics
      protocol: TCP
      # Порт на сервисе
      port: 8081
      # Порт на поде (в контейнере)
      targetPort: 8081
    - name: user-port
      protocol: TCP
      port: 80
      targetPort: 8080
  type: NodePort

---

apiVersion: v1
kind: Service
metadata:
  name: coordinator-service
  namespace: mimikube-dev
  annotations:
    prometheus.io.path: /actuator/prometheus
    prometheus.io.port: '8081'
    prometheus.io.scrape: 'true'
spec:
  # На какие поды будет работать этот сервис
  selector:
    # все поды с таким лейблом
    project: coordinator-pod
  ports:
    - name: coordinator-port
      protocol: TCP
      # Порт на сервисе
      port: 80
      # Порт на поде (в контейнере)
      targetPort: 8080
    - name: coordinator-port-metrics
      protocol : TCP
      port: 8081
      targetPort: 8081
  type: NodePort

---
#Чтобы работал service discovery прометеуса внутри неймспейса. Нужно будет указать serviceAccount на уровне container в
#deployment агента

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: prometheus
  namespace: mimikube-dev
rules:
  - verbs:
      - get
      - watch
      - list
    apiGroups:
      - ''
    resources:
      - pods
      - configmaps
      - endpoints
      - events
      - namespaces
      - services

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: mimikube-dev

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prometheus
  namespace: mimikube-dev
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prometheus
subjects:
  - namespace: mimikube-dev
    kind: ServiceAccount
    name: prometheus
